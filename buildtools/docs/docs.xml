<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.docbook.org/xml/4.4/docbookx.dtd">
<?xml-stylesheet type="text/css" href="driver.css"?>
<?xml-stylesheet type="text/css" href="driver.css"?>
<book>
    <bookinfo>
        <title>Dashboard Framework Developer Documentation</title>
        <author>
            <firstname>Christopher</firstname>
            <surname>Troup</surname>
            <email>chris@norex.ca</email>
        </author>
        <author>
            <firstname>David</firstname>
            <surname>Wolfe</surname>
            <email>wolfe@norex.ca</email>
        </author>
    </bookinfo>
    <chapter>
        <title>Installation</title>
        <sect1>
            <title>Getting Dashboard</title>
            <para>The best way to get the latest sources for Dashboard Framework is through
                GIT.</para>
            <para>
                <screen><prompt>git clone git@github.com:minichate/dashboard.git</prompt></screen>
            </para>
            <para>
                <screen><prompt>cd dashboard.git</prompt></screen>
            </para>
            <para>
                <screen><prompt>git submodule update</prompt></screen>
            </para>
            <para>This will download an installation of Dashboard complete with relevent submodules,
                etc. You should now set up your webserver to serve from this document root. In the
                following examples, we will assume that you have a virtual host set up at <ulink
                    url="http://dashboard/">http://dashboard/</ulink>.</para>
        </sect1>
        <sect1>
            <title>Web Installer</title>
            <para>Point your browser to <ulink url="http://dashboard/buildtools/install/install.php"
                    >http://dashboard/buildtools/install/install.php</ulink>. The first couple steps
                will verify that you have the nessasary components to allow Dashboard to run properly.<itemizedlist>
                    <listitem>
                        <para>PHP 5.2 or greater</para>
                    </listitem>
                    <listitem>
                        <para>MySQL 5.0 or greater</para>
                    </listitem>
                </itemizedlist>It will also verify that the proper permissions have been set up. If
                any of the checks do not pass, please correct them before continuing onto the next
                step.</para>
            <para>The database set will attempt to create a database and create the nessasary tables
                for a minimal set up. Enter the database name, username, password and hostname that
                Dashboard should attempt to connect to.<warning>
                    <para>This executes a <command>DROP TABLE</command> command, so it will remove
                        old tables. Do not run the web installer if you have data that should not be
                        deleted.</para>
                </warning>Once the installer has completed, you should be able to visit <ulink
                    url="http://dashboard/">http://dashboard/</ulink> and see some basic example
                text.</para>
            <para>Access the administration interface through <ulink url="http://dashboard/admin"
                    >http://dashboard/admin</ulink>. The default administration username is norex,
                and the password is D3vP@ss</para>
        </sect1>
    </chapter>
    <chapter>
        <title>Templating</title>
        <sect1>
            <title>Admin Interface</title>
            <para>Site templating in Dashboard is done through a Web GUI. The Templater module is
                accessible via <ulink url="http://dashboard/admin/Templater"
                    >http://dashboard/admin/Templater</ulink></para>
        </sect1>
        <sect1>
            <title>Programming API</title>
            <para>
                <table frame="all">
                    <title>Database Schema: Template Table</title>
                    <tgroup cols="3" align="left" colsep="1" rowsep="1"><colspec colname="name"
                            /><colspec colname="type"/><colspec colname="description"/><thead>
                            <row>
                                <entry>Column Name</entry>
                                <entry>Type</entry>
                                <entry>Description</entry>
                            </row>
                        </thead><tfoot>
                            <row>
                                <entry>Table name:</entry>
                                <entry>templates</entry>
                                <entry/>
                            </row>
                        </tfoot><tbody>
                            <row>
                                <entry>module</entry>
                                <entry>text</entry>
                                <entry>The module name which the template belongs to</entry>
                            </row>
                            <row>
                                <entry>path</entry>
                                <entry>text</entry>
                                <entry>The name of the template. Example: <filename
                                        >site.tpl</filename> or <filename
                                    >admin/list.tpl</filename></entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>longtext</entry>
                                <entry>The actual contents of the template.</entry>
                            </row>
                            <row>
                                <entry>timestamp</entry>
                                <entry>timestamp</entry>
                                <entry>The date and time the template was last edited.</entry>
                            </row>
                            <row>
                                <entry>name</entry>
                                <entry>text</entry>
                                <entry>The human readable name of the template. Example: Site
                                    Template</entry>
                            </row>
                        </tbody></tgroup>
                </table>
            </para>
            <para>
                <example>
                    <title>Getting A List of Templates</title>
                    <programlisting language="php">$templates = Template::toArray(); // this will get a list of all templates
$templates = Template::toArray('CMS'); // list of all templates associated to CMS module</programlisting>
                </example>
            </para>
        </sect1>
    </chapter>
    <chapter>
        <title>DBRow</title>
        <sect1>
            <title>Programming API</title>
            <sect2>
                <title>init</title>
                <para><funcsynopsis>
                        <funcsynopsisinfo>Initialize an object type. This function must be called on each class before the class can be used. It takes the class name of the object as its only parameter.</funcsynopsisinfo>
                    </funcsynopsis></para>
                <para>
                    <example>
                        <title>Simple Example Class</title>
                        <programlisting>class Example extends DBRow {
    public function createTable() {
        return parent::createTable ('example_table', __CLASS__);
    }
}
DBRow::init('Example');</programlisting>
                    </example>
                </para>
            </sect2>
            <sect2>
                <title>make</title>
                <para><funcsynopsis>
                        <funcsynopsisinfo>Fetches an object from the database and prepares it for display or editing.</funcsynopsisinfo>
                    </funcsynopsis></para>
                <para>
                    <example>
                        <title>Get and set a user's first name</title>
                        <programlisting>$user = DBRow::make(1, 'User'); // $user is now populated with the user object
                                // that has the ID of 1.
echo $user->get('name'); // Prints out the users first name
$user->set('name', 'NewFirstName'); // Sets the first name to 'NewFirstNane'
$user->save(); // Save the changes</programlisting>
                    </example>
                    <example>
                        <title>Create a new User</title>
                        <programlisting>$user = DBRow::make(null, 'User');
$user->set('name', 'Joe');
$user->set('last_name', 'Blo');
$user->set('username', 'joeblo');
$user->set('password', 'changeme');
$user->save();</programlisting>
                    </example>
                </para>
            </sect2>
            <sect2>
                <title>save</title>
                <para><funcsynopsis>
                        <funcsynopsisinfo>Save the object.</funcsynopsisinfo>
                    </funcsynopsis><example>
                        <title>Change a password</title>
                        <programlisting>$user = DBRow::make(1, 'User');
$user->set('password', 'supersecret');
$user->save();</programlisting>
                    </example></para>
            </sect2>
            <sect2>
                <title>delete</title>
                <para><funcsynopsis>
                        <funcsynopsisinfo>Delete the object.</funcsynopsisinfo>
                    </funcsynopsis><example>
                        <title>Delete a user</title>
                        <programlisting>$user = DBRow::make(200, 'User');
$user->delete();</programlisting>
                    </example></para>
            </sect2>
            <sect2>
                <title>getAddEditForm</title>
                <para><funcsynopsis>
                        <funcsynopsisinfo>Generate a form that can be used to change/update the object.</funcsynopsisinfo>
                    </funcsynopsis><example>
                        <title>Web update of User object</title>
                        <programlisting>// This example assumes that it is called from http://<emphasis>site_url</emphasis>/user/update
$user = DBRow::make(1, 'User');
$form = $user->getAddEditForm('/user/update'); // Form will submit to http://<emphasis>site_url</emphasis>/user/update
if ($form->isProcessed()) {
    // DBRow automatically updates and saves the object based on the $_REQUEST variables
    echo 'Your record has been updated';
} else {
    echo $form->display();
}</programlisting>
                    </example></para>
            </sect2>
        </sect1>
    </chapter>
</book>
